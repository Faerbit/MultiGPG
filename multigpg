#!/bin/bash 

printUsage(){
    echo "Usage: multigpg MODE ARCHIVE [FILE]
    MODE is one of the following:
    c
    create      : Creates a new GPG-encrypted archive named ARCHIVE. Please specify file name without extensions
    a
    add         : Adds FILE to ARCHIVE
    ex
    extract     : Extracts FILE from ARCHIVE
    e
    edit        : Copies the contents of the archive to a /tmp folder and 
                  opens a custom shell for you to edit the contents
    pw
    password    : Changes the password of ARCHIVE

    The following commands are only available from the custom edit shell 
    and can be executed without calling multigpg first:
    wb
    writeback   : saves changes back to the archive and shreds the /tmp folder
    d
    discard     : discards changes and shreds the /tmp folder
    --help      : prints this help message."
}

parseParameters(){
    if [[ $1 = "create" || $1 = "c" ]]
    then
        mode="create"
    elif [[ $1 = "add" || $1 = "a" ]]
    then
        mode="add"
    elif [[ $1 = "edit" || $1 = "e" ]]
    then
        mode="edit"
    elif [[ $1 = "extract" || $1 = "ex" ]]
    then
        mode="extract"
    elif [[ $1 = "password" || $1 = "pw" ]]
    then
        mode="password"
    elif [[ $1 = "writeback" || $1 = "wb" ]]
    then
        mode="writeback"
    elif [[ $1 = "discard" || $1 = "d" ]]
    then
        mode="discard"
    elif [[ $1 = "--help" ]]
    then
        mode="printUsage"
    else
        mode="printUsage"
    fi
    if [ $mode != "discard" ] && [ $mode != "writeback" ]
    then
        archive=$2
        if [ ! -f $archive ] && [  $mode != "create" ]
        then
            echo "Archive doesn't exist. Aborting."
            exit 1
        fi
    else
        archive=$(basename $2)
    fi
    file=$3
    decrypted_archive=$(basename $archive .gpg)
    working_dir=/tmp/multigpg/$archive
    if [ $mode != "discard" ] && [ $mode != "writeback" ]
    then
        while [ -d $working_dir ]
        do
            working_dir=$working_dir\_other
        done
    fi
}

getPassword(){
    echo "Please enter the password:"
    #save password globally
    read -s password
}

confirmPassword(){
    echo "Please confirm your password:"
    read -s confirm_password
}

decrypt(){
    mkdir -p $working_dir
    if ! $(gpg --batch --passphrase $password -o "$working_dir/$decrypted_archive" -d $archive 2> /dev/null)
    then
        echo "Your password didn't work or something else went wrong."
        exit 1
    fi
}

writeback(){
    gpg --batch --yes --passphrase $password --cipher-algo AES256 -o $archive -c "$working_dir/$decrypted_archive" 
}

shred(){
    #recursively shred all files
    find $working_dir -type f -execdir shred -un 1 '{}' \;
    #remove remaining folders
    rm -r $working_dir
    rmdir /tmp/multigpg 2> /dev/null
    #prevent failure exit code caused by other archives open
    return 0
}

untar(){
    mkdir $working_dir/archive
    tar -C $working_dir/archive -xf $working_dir/$decrypted_archive
}

pack_tar(){
    tar -cf $working_dir/$decrypted_archive -C $working_dir/archive .
}

write_bashrc(){
    #TODO customize commandprompt
    local content="echo 'Please exit this shell with discard or writeback.'\n
alias discard='multigpg discard $working_dir; exit'\n
alias writeback='multigpg writeback $working_dir; exit'\n
cd $working_dir/archive"
    echo -e "$content" > $working_dir/custom_rc
}

#only start execution if script is executed directly
if [[ $(basename $0) = "multigpg" ]]
then
    #make variables globally available
    parseParameters "$@"
    if [[ $mode = "printUsage" ]]
    then 
        printUsage
    elif [[ $mode = "create" ]]
    then
        if [[ -f $archive\.tar.gpg ]]
        then
            echo "Archive already exists."
            exit 1
        fi
        getPassword
        #ask for password a second time to prevent typos
        confirmPassword
        if [[ "$password" = "$confirm_password" ]]
        then
            tar cT /dev/null -f $archive\.tar
            gpg --batch --passphrase $password --cipher-algo AES256 -c $archive\.tar
            rm $archive\.tar
        else
            echo "Passwords didn't match."
            exit 1
        fi
    elif [[ $mode = "add" ]]
    then
        getPassword
        decrypt
        untar
        if ! [[ -f $working_dir/archive/$(basename $file) ]]
        then
            cp $file $working_dir/archive
        else
            echo "File already existed. Please use edit mode to update files."
        fi
        pack_tar
        writeback
        shred
    elif [[ $mode = "extract" ]]
    then
        getPassword
        decrypt
        untar
        if  [ -f $working_dir/archive/$file ]
        then
            cp $working_dir/archive/$file .
        else
            echo "File doesn't exist in this archive. Aborting."
            shred
            exit 1
        fi
        shred
    elif [[ $mode = "password" ]]
    then
        getPassword
        decrypt
        #ask for new password
        echo "Please enter new password:"
        read -s new_password
        confirmPassword
        if [[ "$new_password" = "$confirm_password" ]]
        then
            password="$new_password"
            writeback
        else
            echo "Passwords didn't match."
            shred
            exit 1
        fi
        shred
    elif [ $mode = "edit" ]
    then
        getPassword
        decrypt
        untar
        write_bashrc    
        bash --rcfile $working_dir/custom_rc -i
        exit
    elif [ $mode = "discard" ]
    then
        echo "Discarding changes."
        shred
        exit
    elif [ $mode = "writeback" ]
    then
        echo "Writing changes back."
        pack_tar
        writeback
        exit
    fi

fi
